월말 평가 알고리즘 [문제3] - 흑백그림 문자열로 압축하기

1. 문제에 제시된 흑백그림 압축 결과
xx1110x1x100011xxx11000111x1x00111010


2. 재귀문 슈도코드
def algo3(matrix, N):				# matrix: 흑백그림의 NxN 크기 2차원 배열(흑=0, 백=1), N: 2차원 배열의 한 변 길이(짝수이다)
    global result				# result: 최종 결과인 압축된 문자열을 나타내는 스트링 변수(초기값 = '') -> 재귀함수 안에서 global 변수 선언
    if do sum(matrix의 모든 요소)이 N*N이라면:	# sum(matrix의 모든 요소)는 다음과 같이 구현할 수 있다. -> sum([sum(matrix[i]) for i in range(N)])
        result <- result + '1'			# 현재 단계의 matrix가 모두 흰색일 때 result 뒤에 '1'을 덧붙여줌
        return
    elif do sum(matrix의 모든 요소)이 0이라면:
        result <- result + '0'			# 현재 단계의 matrix가 모두 검은색일 때 result 뒤에 '0'을 덧붙여줌
        return
    else:
        result <- result + 'x'			# 현재 단계의 matrix가 모두 같은 색이 아닐 때 result 뒤에 'x'를 덧붙여줌
        matrix1 <- matrix의 왼쪽상단 4분면		# matrix의 왼쪽상단 4분면은 다음과 같이 구현할 수 있다. -> [matrix[i][:N//2] for i in range(N//2)]
        matrix2 <- matrix의 오른쪽상단 4분면	# matrix의 오른쪽상단 4분면은 다음과 같이 구현할 수 있다. -> [matrix[i][N//2:] for i in range(N//2)]
        matrix3 <- matrix의 왼쪽하단 4분면		# matrix의 왼쪽하단 4분면은 다음과 같이 구현할 수 있다. -> [matrix[i][:N//2] for i in range(N//2, N)]
        matrix4 <- matrix의 오른쪽하단 4분면	# matrix의 오른쪽하단 4분면은 다음과 같이 구현할 수 있다. -> [matrix[i][N//2:] for i in range(N//2, N)]
        algo3(matrix1, N//2)
        algo3(matrix2, N//2)
        algo3(matrix3, N//2)
        algo3(matrix4, N//2)


3. 실제 파이썬에서 돌려본 코드
def algo3(matrix, N):
    global result
    if sum([sum(matrix[i]) for i in range(N)]) == N*N:
        result += '1'
        return
    elif sum([sum(matrix[i]) for i in range(N)]) == 0:
        result += '0'
        return
    else:
        result += 'x'
        matrix1 = [matrix[i][:N//2] for i in range(N//2)]
        matrix2 = [matrix[i][N//2:] for i in range(N//2)]
        matrix3 = [matrix[i][:N//2] for i in range(N//2, N)]
        matrix4 = [matrix[i][N//2:] for i in range(N//2, N)]
        algo3(matrix1, N//2)
        algo3(matrix2, N//2)
        algo3(matrix3, N//2)
        algo3(matrix4, N//2)

T = int(input())
for tc in range(1, T+1):
    N = int(input())
    M = [list(map(int, input().split())) for _ in range(N)]
    result = ''
    algo3(M, N)
    print(result)